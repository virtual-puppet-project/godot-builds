name: All Builds
on:
  workflow_dispatch:
    inputs:
      include-artifacts:
        type: boolean
        description: Upload artifacts?
        required: true

env:
  GODOT_REPO: godotengine/godot
  GODOT_REF: 3.5
  GODOT_PATH: godot/

  APPLIER_REPO: virtual-puppet-project/godot-module-applier
  APPLIER_REF: senpai
  APPLIER_PATH: godot-module-applier/

  TAG: latest

jobs:
  cleanup-release:
    runs-on: ubuntu-latest
    steps:
      - name: Delete old tag and release
        uses: you-win/delete-tag-and-release@v0.2.0
        with:
          delete_release: true
          tag_name: ${{ env.TAG }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - uses: actions/checkout@v3
      - name: Update tag
        shell: bash
        run: |
          git config --global user.name "$(curl https://api.github.com/users/${{ github.actor }} | jq .name)"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

          git tag ${{ env.TAG }}

          git push --tags

  build-all:
    needs: cleanup-release
    strategy:
      fail-fast: false
      matrix:
        include:
          # os: [...] not used since I can't think of a way to reconcile the
          # binary name against the OS
          - name: Godot_v3.x-stable_linux_editor.64
            os: ubuntu-latest
            build-script: scons platform=x11 target=release_debug tools=yes -j8
            bin: godot/bin/godot.x11.opt.tools.64
          - name: Godot_v3.x-stable_linux_release.64
            os: ubuntu-latest
            build-script: scons platform=x11 target=release tools=no use_lto=yes -j8
            bin: godot/bin/godot.x11.opt.64
          - name: Godot_v3.x-stable_linux_headless.64
            os: ubuntu-latest
            build-script: scons platform=server target=release_debug tools=yes -j8
            bin: godot/bin/godot_server.x11.opt.tools.64

          - name: Godot_v3.x-stable_windows_editor.64.exe
            os: windows-latest
            build-script: scons platform=windows target=release_debug tools=yes -j8
            bin: godot/bin/godot.windows.opt.tools.64.exe
          - name: Godot_v3.x-stable_windows_release.64.exe
            os: windows-latest
            build-script: scons platform=windows target=release tools=no use_lto=yes -j8
            bin: godot/bin/godot.windows.opt.64.exe

          - name: Godot_v3.x-stable_osx_editor.64
            os: macos-latest
            build-script: |
              scons platform=osx arch=arm64 target=release_debug tools=yes -j8
              scons platform=osx arch=x86_64 target=release_debug tools=yes -j8
              lipo -create bin/godot.osx.opt.tools.arm64 bin/godot.osx.opt.tools.x86_64 -output bin/godot.osx.opt.tools.universal
            bin: godot/bin/godot.osx.opt.tools.universal
          - name: Godot_v3.x-stable_osx_release.64
            os: macos-latest
            build-script: |
              scons platform=osx arch=arm64 target=release tools=no use_lto=yes -j8
              scons platform=osx arch=x86_64 target=release tools=no use_lto=yes -j8
              lipo -create bin/godot.osx.opt.arm64 bin/godot.osx.opt.x86_64 -output bin/godot.osx.opt.universal
            bin: godot/bin/godot.osx.opt.universal
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-deps
        with:
          godot-path: ${{ env.GODOT_PATH }}
          godot-module-applier-path: ${{ env.APPLIER_PATH }}

      - name: Build
        working-directory: ${{ env.GODOT_PATH }}
        run: ${{ matrix.build-script }}

      - name: Set targz name
        shell: bash
        run: echo "TAR_PATH=${{ format('{0}.tar.gz', matrix.name) }}" >> $GITHUB_ENV

      - name: Pack binary
        shell: bash
        run: |
          # Use nice, readable names for the binaries
          mv ${{ matrix.bin }} ${{ matrix.name }}
          strip ${{ matrix.name }}
          tar -czvf ${{ env.TAR_PATH }} ${{ matrix.name }}

      # Basic artifact upload, artifacts are ephemeral
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        if: inputs.include-artifacts == 'true'
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}
          if-no-files-found: error

      # Retag and upload semi-permament binaries
      - name: Upload release artifacts
        uses: you-win/action-gh-release@v1
        with:
          files: ${{ env.TAR_PATH }}
          name: Latest
          tag_name: ${{ env.TAG }}
